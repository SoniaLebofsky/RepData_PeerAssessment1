text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
library(swril)
library(swirl)
swirl()
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
subset(airquality, Month == 5)
may <- subset(airquality, Month == 5)
with(may, points(Wind, Ozone, pch = 2, col = "blue"))
with(may, points(Wind, Ozone, pch = 17, col = "blue"))
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1, 2))
plot(airquality$Wind, airquality$Ozone, title = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0,0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
y <- sample(1:6, 100000)
y <- sample(1:6, 100000, replace = TRUE)
mean(y)
>  x = c(1,1,1,2,3,3,3,1,1)
>  y = rle(x)
>  y
x = c(1,1,1,2,3,3,3,1,1)
y = rle(x)
y
y$lengths
set.seed(10)
y <- rbinom(20, 1, 0.5)
?rbinom
y
rle(y)
y$lengths
y
foo <- rle(y)
foo$lengths
?rbinom
ntosses <- 8
ntrials <- 1000
phead <- 0.6
y <- rbinom(8, 1000, 0.6)
y
rm(y)
y <- rbinom(ntosses*ntrials, 1, phead)
rm(list=ls())
outcome <- 1:10
y <- outcome^2 - 7*outcome
plot(outcome, y, pch = 16)
rm(list=ls())
outcome <- 0:10
y <- outcome^2 -7*outcome
plot(outcome, y, pch=16)
?dbinom
probs <- dbinom(outcome, 10, 0.6)
probs
sum(probs)
sum(probs*y)
trials <- rbinom(10*10000, 1, 0.6)
z <- matrix(trials, 10, 10000)
size(z)
dim(z)
foo <- colSums(z)
foo
bar <- foo^2 - 7*foo
mean(bar)
test <- rbinom(1000, 10, 0.6)
test
y <- test^2 - 7*test
mean(y)
library(swirl)
swirl()
head(airquality)
xyplot(y~x, data = airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality)
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.4")
myedit("plot2.r"
)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(),10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, BuGn)
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim= c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
?rbinom
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
trial
rle(trial)
rle(trial)$lengths
max(rle(trial)$lengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
maxRun
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
runLengths
mean(runLengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
mean(runLengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
mean(runLengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
runLengths
runLengths >= 8
sum(runLengths >= 8)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
avgLength
prob8orMore
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
avgLength
prob8orMore
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
prob8orMore
library(swirl)
Sonia
swril()
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut
)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facets = .~cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length =4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
g <- ggplot(diamonds, aes(carat, price))
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
h = xyplot(weight ~ Time | Diet, BodyWeight)
type(h)
class(h)
axis()
panel.abline()
library(datasets)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
?geom
setwd("~/Desktop/Pre_Data_Science_Study/DataScience_and_ML/coursera_reproducibleResearch/RepData_PeerAssessment1")
?read.csv
## Loading and preprocessing the data
?sum
?split
?sum
activityData <- read.csv(file = "activity.csv", header = TRUE)
library(dplyr)
stepsData <- activityData %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
range(stepsData$totalStepsPerDay)
21194/30
stepsData <- activityData %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 500, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
stepsData <- activityData %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
stepsData
stepsData <- activityData %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
meanStepsPerDay <- mean(stepsData$totalStepsPerDay)
medStepsPetDay <- median(stepsData$totalStepsPerDay)
meanStepsPerDay
medStepsPetDay
activityData <- read.csv(file = "activity.csv", header = TRUE)
library(dplyr)
head(activityData)
library(dplyr)
activityData <- read.csv(file = "activity.csv", header = TRUE)
head(activityData)
foo <- filter(activityData, steps != NA)
foo
foo <- filter(activityData, steps != "NA")
foo
head(foo)
any(activityData$date == "NA")
any(activityData$steps == "NA")
any(activityData$interval == "NA")
stepsData <- activityData_noNA %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
meanStepsPerDay <- mean(stepsData$totalStepsPerDay)
medStepsPetDay <- median(stepsData$totalStepsPerDay)
rm(list=ls())
library(dplyr)
activityData <- read.csv(file = "activity.csv", header = TRUE)
activityData_noNA <- filter(activityData, steps != "NA")
stepsData <- activityData_noNA %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
meanStepsPerDay <- mean(stepsData$totalStepsPerDay)
medStepsPetDay <- median(stepsData$totalStepsPerDay)
stepsData <- activityData_noNA %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
meanStepsPerDay <- mean(stepsData$totalStepsPerDay)
medStepsPerDay <- median(stepsData$totalStepsPerDay)
summary(stepsData$totalStepsPerDay)
stepsData <- activityData_noNA %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g <- ggplot(stepsData, aes(totalStepsPerDay))
g + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
stepsSummary <- summary(stepsData$totalStepsPerDay)
stepsSummary
stepsSummary$Median
class(stepsSummary)
stepsSummary["Median"]
stepsSummary[["Median"]]
library(dplyr)
activityData <- read.csv(file = "activity.csv", header = TRUE)
activityData_noNA <- filter(activityData, steps != "NA")
head(activityData_noNA)
activityData_noNA %>% group_by(interval)
activityData_noNA %>% group_by(interval) %>% summarize(sum(steps))
activityData_noNA %>% group_by(interval) %>% summarize(mean(steps))
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
intervalDAta
intervalData
stepsData <- activityData_noNA %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps, na.rm = TRUE))
library(ggplot2)
g1 <- ggplot(stepsData, aes(totalStepsPerDay))
g1 + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
stepsSummary <- summary(stepsData$totalStepsPerDay)
stepsSummary
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
g2 <- ggplot(intervalData, aes(interval, avgStepsPerInterval))
g2 + geom_line()
interval
intervalData
str(intervalDAta)
str(intervalData)
intervalData$interval
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
g2 <- ggplot(intervalData, aes(interval, avgStepsPerInterval))
g2 + geom_line() + theme_bw() + labs(x = "5-minute Interval", y = "Average Number of Steps Taken (averaged across all days)")
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
g2 <- ggplot(intervalData, aes(interval, avgStepsPerInterval))
g2 + geom_line() + theme_bw() + labs(x = "5-minute Interval", y = "Average Number of Steps Taken")
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
g2 <- ggplot(intervalData, aes(interval, avgStepsPerInterval))
g2 + geom_line() + theme_bw() + labs(x = "5-minute Interval", y = "Average Number of Steps Taken")
max(intervalData$avgStepsPerInterval)
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
g2 <- ggplot(intervalData, aes(interval, avgStepsPerInterval))
g2 + geom_line() + theme_bw() + labs(x = "5-minute Interval", y = "Average Number of Steps Taken")
intervalData$interval[intervalData$avgStepsPerInterval == max(intervalData$avgStepsPerInterval)]
intervalData[835, ]
intervalData$avgStepsPerInterval == max(intervalData$avgStepsPerInterval)
which.max(intervalData$avgStepsPerInterval)
intervalData <- activityData_noNA %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
g2 <- ggplot(intervalData, aes(interval, avgStepsPerInterval))
g2 + geom_line() + theme_bw() + labs(x = "5-minute Interval", y = "Average Number of Steps Taken")
maxInterval <- intervalData$interval[which.max(intervalData$avgStepsPerInterval)]
maxInterval
intervalData[which.max(intervalData$avgStepsPerInterval), ]
sum(activityData$steps == "NA")
activityData$steps == "NA"
str(activityData)
sum(activityData$steps == NA)
is.na(activityData$steps)
sum(is.na(activityData$steps))
library(dplyr)
activityData <- read.csv(file = "activity.csv", header = TRUE)
activityData_noNA <- filter(activityData, !is.na(steps))
activityData_noNA
head(activityData_noNA, 15)
head(activityData_noNA, 50)
numNA <- is.NA(activityData$steps)
numNA
numNA <- is.na(activityData$steps)
numNA
numNA <- sum(is.na(activityData$steps))
numNA
head(activityData)
head(activityData)
head(intervalData)
?lapply
?ddply
?tapply
?ddply
foo <- as.numeric(is.na(activityData$steps))
foo
intervalData$avgStepsPerInterval
bar <- foo*intervalData$avgStepsPerInterval
bar
?replace()
which.(foo == 1)
which(foo == 1)
rm(list=ls())
foo <- as.numeric(is.na(activityData$steps))
foo <- as.numeric(is.na(activityData$steps))
source('~/.active-rstudio-document', echo=TRUE)
foo
foo <- as.numeric(is.na(activityData$steps))
foo*intervalData$avgStepsPerInterval
blah <- replace(activityData$steps, which(foo == 1), foo*intervalData$avgStepsPerInterval)
activityData$steps
activityData$steps[is.na] <- 0
activityData$steps[is.na(activityData$steps)] <- 0
activityData$steps
activityDataImputed <- activityData # set new dataframe to match old dataframe
# create vector where where indices with corresponding NA values in activityData$steps
# have the value of the average number of steps taken for that 5-minute interval, zeros elsewhere
subVector <- as.numeric(is.na(activityData$steps))*intervalData$avgStepsPerInterval
# Replace NAs with 0 and add subVector to steps data to get imputed steps data
activityDataImputed$steps[is.na(activityDataImputed$steps)] <- 0
activityDataImputed$steps <- activityDataImputed$steps + subVector
activityDataImputed
head(activityDataImputed)
head(activityData$steps)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
head(activityData)
subVector[1:6]
head(activityDataImputed)
# group by date and then find sum of steps for each date
stepsDataNew <- activityDataImputed %>% group_by(date) %>% summarize(totalStepsPerDay = sum(steps))
# plot histogram
g1 <- ggplot(stepsDataNew, aes(totalStepsPerDay))
g1 + geom_histogram(binwidth = 1000, color = "aquamarine3", fill = "aquamarine") + theme_bw() + labs(x = "Total Number of Steps Each Day")
# get summary data to find mean and median
stepsSummaryNew <- summary(stepsDataNew$totalStepsPerDay)
stepsSummaryNew
?weekdays
weekdays(activityData$date)
weekdays(as.date(activityData$date))
weekdays(as.Date(activityData$date))
?weekend
weekdays()
?factor
we <- c("Saturday", "Sunday") # vector of weekend days
weekdays(as.Date(activityDataImputed$date)) %in% we
# create factor variable based on day type (weekday or weekend) and add to dataframe
#activityDataImputed$dayType <- factor((weekdays(as.Date(activityDataImputed$date)) %in% we),levels = c(0,1), labels = c("Weekday", "Weekend"))
we <- c("Saturday", "Sunday") # vector of weekend days
# create factor variable based on day type (weekday or weekend) and add to dataframe
activityDataImputed$dayType <- factor((weekdays(as.Date(activityDataImputed$date)) %in% we),levels = c(0,1), labels = c("Weekday", "Weekend"))
head(activityDataImputed, 15)
we <- c("Saturday", "Sunday") # vector of weekend days
# create factor variable based on day type (weekday or weekend) and add to dataframe
activityDataImputed$dayType <- factor((weekdays(as.Date(activityDataImputed$date)) %in% we),levels = c(FALSE,TRUE), labels = c("Weekday", "Weekend"))
head(activityDataImputed, 15)
tail(acitivityDataImputed, 15)
tail(activityDataImputed, 15)
activityDataImputed$dayType
head(activityDataImputed)
we <- c("Saturday", "Sunday") # vector of weekend days
# create factor variable based on day type (weekday or weekend) and add to dataframe
activityDataImputed$dayType <- factor((weekdays(as.Date(activityDataImputed$date)) %in% we),levels = c(FALSE,TRUE), labels = c("Weekday", "Weekend"))
library(lattice) # load lattice plot
# create panel plot
xyplot(mean(steps)~interval, data = activityDataImputed, layout = c(2,1))
foo <- activityDataImputed %>% group_by(interval) %>% summarise(avgStepsPerInterval = mean(steps))
foo
foo <- activityDataImputed %>% group_by(interval,dayType) %>% summarise(avgStepsPerInterval = mean(steps))
foo
xyplot(avgStepsPerInterval~interval|dayType, data = foo, layout = c(2,1), type = "l")
xyplot(avgStepsPerInterval~interval|dayType, data = foo, layout = c(1,2), type = "l")
we <- c("Saturday", "Sunday") # vector of weekend days
# create factor variable based on day type (weekday or weekend) and add to dataframe
activityDataImputed$dayType <- factor((weekdays(as.Date(activityDataImputed$date)) %in% we),levels = c(FALSE,TRUE), labels = c("Weekday", "Weekend"))
library(lattice) # load lattice plot
# create panel plot
xyplot(mean(steps)~interval|dayType, data = activityDataImputed, layout = c(1,2), type = "l")
